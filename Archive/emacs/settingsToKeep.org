* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package lua-mode)
(use-package web-mode)
(use-package typescript-mode)
(use-package rust-mode)
(use-package markdown-mode)
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src

* FONTS
Defining the various fonts that emacs will use.

** Setting The Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "Mononoki Nerd Font Mono"
                    :height 120
                    :weight 'bold)
(set-face-attribute 'variable-pitch nil
                    :font "Ubuntu Nerd Font"
                    :height 130
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "Mononoki Nerd Font Mono"
                    :height 120
                    :weight 'bold)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src
* General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer kmacs/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; Exit insert state / mode using kj keybind
  (general-imap "k"
    (general-key-dispatch 'self-insert-command
      :timeout 0.25
      "j" 'evil-normal-state))

  (kmacs/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x"))
  (kmacs/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bi" '(ibuffer :wk "Ibuffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "br" '(revert-buffer :wk "Reload buffer"))

  (kmacs/leader-keys
    "e" '(:ignore t :wk "Evaluate")    
    "eb" '(eval-buffer :wk "Evaluate elisp in buffer")
    "ed" '(eval-defun :wk "Evaluate defun containing or after point")
    "ee" '(eval-expression :wk "Evaluate and elisp expression")
    "el" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "er" '(eval-region :wk "Evaluate elisp in region")) 

  (kmacs/leader-keys
    "f" '(:ignore t :wk "Find")
    "ff" '(find-file :wk "Find file")
    "fr" '(counsel-recentf :wk "Find recent files"))

  (kmacs/leader-keys
    "h" '(:ignore t :wk "Help")
    "hf" '(describe-function :wk "Help describe function")
    "hv" '(describe-variable :wk "Help describe variable")
    "hi" '(indent-region :wk "Help indent region")
    ;; "hrr" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
    "hr" '(reload-init-file :wk "Help reload emacs config"))

  (kmacs/leader-keys
    "m" '(:ignore t :wk "Org")
    "ma" '(org-agenda :wk "Org agenda")
    "me" '(org-export-dispatch :wk "Org export dispatch")
    "mi" '(org-toggle-item :wk "Org toggle item")
    "mt" '(org-todo :wk "Org todo")
    "mB" '(org-babel-tangle :wk "Org babel tangle")
    "ms" '(org-edit-special :wk "Org edit code blocks")
    "mT" '(org-todo-list :wk "Org todo list"))

  (kmacs/leader-keys
    "mb" '(:ignore t :wk "Tables")
    "mb -" '(org-table-insert-hline :wk "Insert hline in table"))

  (kmacs/leader-keys
    "md" '(:ignore t :wk "Date/deadline")
    "mdt" '(org-time-stamp :wk "Org time stamp"))


  (kmacs/leader-keys
    "o" '(:ignore t :wk "Open/Run")
    "or" '(emacs-run-launcher :wk "Run Emacs App Launcher")
    "op" '(projectile-command-map :wk "Open Projectile")
    "od" '(dashboard-open :wk "Open Dashboard")
    "oc" '(emacs-counsel-launcher :wk "Run Emacs Counsel Laucher"))

  (kmacs/leader-keys
    "p" '(:ignore t :wk "Edit")
    "pc" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "ps" '((lambda () (interactive) (find-file "~/.system/flake.nix")) :wk "Edit system config")
    "pu" '((lambda () (interactive) (find-file "~/Projects/unity-market-admin/flake.nix")) :wk "Edit Unity Project"))

  (kmacs/leader-keys
    "s" '(:ignore t :wk "Shell")
    "se" '(eshell :wk "EShell")
    "sh" '(counsel-esh-history :wk "Run EShell history"))

  (kmacs/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "tl" '(display-line-numbers-mode :wk "Toggle line numbers")
    "tt" '(visual-line-mode :wk "Toggle truncated lines")
    "tc" '(comment-line :wk "Toggle Comment lines")
    "tv" '(vterm-toggle :wk "Toggle vterm"))

  (kmacs/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "wc" '(evil-window-delete :wk "Close window")
    "wn" '(evil-window-new :wk "New window")
    "ws" '(evil-window-split :wk "Horizontal split window")
    "wv" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "wh" '(evil-window-left :wk "Window focus left")
    "wj" '(evil-window-down :wk "Window focus down")
    "wk" '(evil-window-up :wk "Window focus up")
    "wl" '(evil-window-right :wk "Window focus right")
    "ww" '(evil-window-next :wk "Focus onto next window")
    ;; Move Windows
    "wb" '(:ignore t :wk "Window Buffer")
    "wbH" '(buf-move-left :wk "Window Buffer move left")
    "wbJ" '(buf-move-down :wk "Window Buffer move down")
    "wbK" '(buf-move-up :wk "Window Buffer move up")
    "wbL" '(buf-move-right :wk "Window Buffer move right"))

  )

#+end_src

